// Include
#include <stdint.h>
#include <stm32f446xx.h>
#include <stdio.h>
#include "main.h"
#include "gpio.h"
#include "usart.h"

// Define
#define TABLE0_SIZE    10

// Global variables
uint8_t table0[TABLE0_SIZE] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

// Private functions
int __io_putchar(int ch)
{
	while(((USART2->SR)&= (1<<7))==0);
	USART2->DR = ch;
}

// Main
int main(void)
{
	// Initialize peripherals
	GPIO_Init();
	USART2_Init();

    DMA1_Stream6->CR   &= ~(DMA_SxCR_EN);             // deactivate DMA stream for configuration
    DMA1_Stream6->CR   &= ~(DMA_SxCR_CHSEL);          // clear bits
	DMA1_Stream6->CR   |= 4 << DMA_SxCR_CHSEL_Pos;    // Select channel 4

    DMA1_Stream6->M0AR = ( uint32_t ) table0;         // Select source addr
	DMA1_Stream6->PAR  = ( uint32_t ) &USART2->DR;    // Select dest addr
	DMA1_Stream6->FCR  |= 3 << DMA_SxFCR_FTH_Pos;     // Select FIFO size as full

	DMA1_Stream6->CR   |= 0 << DMA_SxCR_DBM_Pos;      // Single buffer mode
	DMA1_Stream6->CR   |= 0 << DMA_SxCR_MSIZE_Pos;    // Memory data size is 8bits
    DMA1_Stream6->CR   &= ~(DMA_SxCR_PL);             // priority 00 = low
    DMA1_Stream6->CR   &= ~(DMA_SxCR_PSIZE);          // size 00 = 8bit
    DMA1_Stream6->CR   |= (DMA_SxCR_MINC);            // increment memory pointer with each DMA transfer

    DMA1_Stream6->CR   |=  (DMA_SxCR_DIR_0); // 01 = memory-to-peripheral
	DMA1_Stream6->CR   |= 0 << DMA_SxCR_PFCTRL_Pos;   // Select MEM TO PERIPH
	DMA1_Stream6->CR   |= 1 << DMA_SxCR_TCIE_Pos;     // Enable transfer complete IT
	DMA1_Stream6->NDTR |= 10;                         // Set the number of items to transfer


    DMA1_Stream6->CR &= ~(DMA_SxCR_EN); // deactivate DMA stream for configuration
    DMA1_Stream6->CR &= ~(DMA_SxCR_CHSEL); // clear bits
    DMA1_Stream6->CR |=  (DMA_SxCR_CHSEL_2); // 100 = channel 4
    DMA1_Stream6->CR &= ~(DMA_SxCR_PL); // priority 00 = low
    DMA1_Stream6->CR &= ~(DMA_SxCR_PSIZE); // size 00 = 8bit
    DMA1_Stream6->CR |= (DMA_SxCR_MINC); // increment memory pointer with each DMA transfer
    DMA1_Stream6->CR &= ~(DMA_SxCR_DIR); // clear bits
    DMA1_Stream6->CR |=  (DMA_SxCR_DIR_0); // 01 = memory-to-peripheral
    DMA1_Stream6->PAR = ( uint32_t )&USART2->DR; // peripheral memory address
    DMA1_Stream6->M0AR = ( uint32_t )&table0; // data memory address
    DMA1_Stream6->NDTR = ( uint16_t ) 10; // number of bytes to transfer

	DMA1->HIFCR = DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6; // clear DMA flags
    USART2->SR &= ~(USART_SR_TC); // clear USART transfer complete flag


	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);


	// Infinite loop
	while(1)
	{
		// Nothing to do
	}
}

// Exported function
void button_is_pressed(void)
{
//	// Variable declaration
//	uint8_t index = 0U;
//
//	for(index = 0; index < TABLE0_SIZE; index++)
//	{
//		while(((USART2->SR)&= (1<<7))==0);
//		USART2->DR = table0[index];
//	}

}

// End of file
