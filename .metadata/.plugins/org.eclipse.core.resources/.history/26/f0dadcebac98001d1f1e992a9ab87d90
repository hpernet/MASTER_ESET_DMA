/*
 * dma.c
 *
 *  Created on: 20 janv. 2023
 *      Author: hugop
 */
// Includes
#include "dma.h"

// Externals variables
extern uint8_t table0[TABLE0_SIZE];
extern uint8_t table1[TABLE0_SIZE];
extern int16_t sinusTable[BUFFER_SIZE_SINUS];

// Public functions
void DMA_Init(void)
{
	RCC->AHB1ENR = RCC_AHB1ENR_DMA1EN;             // Activate the clock
    DMA1_Stream6->CR  &= ~(DMA_SxCR_EN);           // deactivate DMA stream for configuration
    DMA1_Stream6->CR  &= ~(DMA_SxCR_CHSEL);        // clear bits
    DMA1_Stream6->CR  |=  (DMA_SxCR_CHSEL_2);      // 100 = channel 4
    DMA1_Stream6->CR  &= ~(DMA_SxCR_PL);           // priority 00 = low
    DMA1_Stream6->CR  &= ~(DMA_SxCR_PSIZE);        // size 00 = 8bit
    DMA1_Stream6->CR  |=  (DMA_SxCR_MINC);         // increment memory pointer with each DMA transfer
    DMA1_Stream6->CR  &= ~(DMA_SxCR_DIR);          // clear bits
    DMA1_Stream6->CR  |=  (DMA_SxCR_DIR_0);        // 01 = memory-to-peripheral
    DMA1_Stream6->CR  |=  (DMA_SxCR_TCIE);         // Enable interrupt when a full transfer is complete
//    DMA1_Stream6->CR  |=  (DMA_SxCR_DBM);          // Enable double buffering mode
    DMA1_Stream6->PAR  =  &USART2->DR;             // peripheral memory address
    DMA1_Stream6->M0AR =  sinusTable;                  // data memory address
//    DMA1_Stream6->M1AR =  table1;                  // data memory address
    DMA1_Stream6->NDTR = ( uint16_t ) BUFFER_SIZE_SINUS; // number of bytes to transfer
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);         // Activate DMA interrupt line in NVIC
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 1);
}

void DMA_bis_Init(void)
{
	RCC->AHB1ENR = RCC_AHB1ENR_DMA1EN;             // Activate the clock
    DMA1_Stream5->CR  &= ~(DMA_SxCR_EN);           // deactivate DMA stream for configuration
    DMA1_Stream5->CR  &= ~(DMA_SxCR_CHSEL);        // clear bits
    DMA1_Stream5->CR  |=  (DMA_CHANNEL_7);         // channel 7
    DMA1_Stream5->CR  &= ~(DMA_SxCR_PL);           // priority 00 = low
    DMA1_Stream5->CR  &= ~(DMA_SxCR_PSIZE);        // size 00 = 8bit
    DMA1_Stream5->CR  |=  (DMA_SxCR_MINC);         // increment memory pointer with each DMA transfer
    DMA1_Stream5->CR  &= ~(DMA_SxCR_DIR);          // clear bits
    DMA1_Stream5->CR  |=  (DMA_SxCR_DIR_0);        // 01 = memory-to-peripheral
    DMA1_Stream5->CR  |=  (DMA_SxCR_TCIE);         // Enable interrupt when a full transfer is complete
//    DMA1_Stream6->CR  |=  (DMA_SxCR_DBM);          // Enable double buffering mode
    DMA1_Stream6->PAR  =  &USART2->DR;             // peripheral memory address
    DMA1_Stream6->M0AR =  sinusTable;                  // data memory address
//    DMA1_Stream6->M1AR =  table1;                  // data memory address
    DMA1_Stream6->NDTR = ( uint16_t ) BUFFER_SIZE_SINUS; // number of bytes to transfer
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);         // Activate DMA interrupt line in NVIC
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 1);
}
// End of file
