
BootLoarder_TP_User_Application0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e18  080081c4  080081c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008fdc  08008fdc  00008fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009058  08009058  00010068  2**0
                  CONTENTS
  4 .ARM          00000000  08009058  08009058  00010068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009058  08009058  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009058  08009058  00009058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800905c  0800905c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08009060  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  080090c8  00010068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080090c8  0001009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002223  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008dc  00000000  00000000  000122bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  00012b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000258  00000000  00000000  00012e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210ba  00000000  00000000  000130d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ed7  00000000  00000000  0003418a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c814a  00000000  00000000  00037061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff1ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f94  00000000  00000000  000ff1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081c4 <__do_global_dtors_aux>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4c05      	ldr	r4, [pc, #20]	; (80081dc <__do_global_dtors_aux+0x18>)
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	b933      	cbnz	r3, 80081da <__do_global_dtors_aux+0x16>
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <__do_global_dtors_aux+0x1c>)
 80081ce:	b113      	cbz	r3, 80081d6 <__do_global_dtors_aux+0x12>
 80081d0:	4804      	ldr	r0, [pc, #16]	; (80081e4 <__do_global_dtors_aux+0x20>)
 80081d2:	f3af 8000 	nop.w
 80081d6:	2301      	movs	r3, #1
 80081d8:	7023      	strb	r3, [r4, #0]
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	20000068 	.word	0x20000068
 80081e0:	00000000 	.word	0x00000000
 80081e4:	08008fc4 	.word	0x08008fc4

080081e8 <frame_dummy>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <frame_dummy+0x10>)
 80081ec:	b11b      	cbz	r3, 80081f6 <frame_dummy+0xe>
 80081ee:	4903      	ldr	r1, [pc, #12]	; (80081fc <frame_dummy+0x14>)
 80081f0:	4803      	ldr	r0, [pc, #12]	; (8008200 <frame_dummy+0x18>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	bd08      	pop	{r3, pc}
 80081f8:	00000000 	.word	0x00000000
 80081fc:	2000006c 	.word	0x2000006c
 8008200:	08008fc4 	.word	0x08008fc4

08008204 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8008208:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <GPIO_Init+0x30>)
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	4a09      	ldr	r2, [pc, #36]	; (8008234 <GPIO_Init+0x30>)
 800820e:	f043 0305 	orr.w	r3, r3, #5
 8008212:	6313      	str	r3, [r2, #48]	; 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 8008214:	4b08      	ldr	r3, [pc, #32]	; (8008238 <GPIO_Init+0x34>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a07      	ldr	r2, [pc, #28]	; (8008238 <GPIO_Init+0x34>)
 800821a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800821e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 8008220:	4b06      	ldr	r3, [pc, #24]	; (800823c <GPIO_Init+0x38>)
 8008222:	4a06      	ldr	r2, [pc, #24]	; (800823c <GPIO_Init+0x38>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6013      	str	r3, [r2, #0]
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40023800 	.word	0x40023800
 8008238:	40020000 	.word	0x40020000
 800823c:	40020800 	.word	0x40020800

08008240 <__io_putchar>:
#include "main.h"
#include "gpio.h"
#include "usart.h"

int __io_putchar(int ch)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	while(((USART2->SR)&= (1<<7))==0);
 8008248:	bf00      	nop
 800824a:	4b09      	ldr	r3, [pc, #36]	; (8008270 <__io_putchar+0x30>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a08      	ldr	r2, [pc, #32]	; (8008270 <__io_putchar+0x30>)
 8008250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f7      	beq.n	800824a <__io_putchar+0xa>
	USART2->DR = ch;
 800825a:	4a05      	ldr	r2, [pc, #20]	; (8008270 <__io_putchar+0x30>)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6053      	str	r3, [r2, #4]
}
 8008260:	bf00      	nop
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40004400 	.word	0x40004400

08008274 <main>:

int main(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
	GPIO_Init();
 800827a:	f7ff ffc3 	bl	8008204 <GPIO_Init>
	USART2_Init();
 800827e:	f000 f8f9 	bl	8008474 <USART2_Init>

	while(1){
		for(uint32_t i = 0 ; i<50000; i++);
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
 8008286:	e002      	b.n	800828e <main+0x1a>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3301      	adds	r3, #1
 800828c:	607b      	str	r3, [r7, #4]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8008294:	4293      	cmp	r3, r2
 8008296:	d9f7      	bls.n	8008288 <main+0x14>
		GPIOA->ODR ^= 1<<5;
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <main+0x38>)
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	4a03      	ldr	r2, [pc, #12]	; (80082ac <main+0x38>)
 800829e:	f083 0320 	eor.w	r3, r3, #32
 80082a2:	6153      	str	r3, [r2, #20]
		printf("This is Application0\r\n");
 80082a4:	4802      	ldr	r0, [pc, #8]	; (80082b0 <main+0x3c>)
 80082a6:	f000 f9fd 	bl	80086a4 <puts>
		for(uint32_t i = 0 ; i<50000; i++);
 80082aa:	e7ea      	b.n	8008282 <main+0xe>
 80082ac:	40020000 	.word	0x40020000
 80082b0:	08008fdc 	.word	0x08008fdc

080082b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082b8:	e7fe      	b.n	80082b8 <NMI_Handler+0x4>

080082ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082ba:	b480      	push	{r7}
 80082bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082be:	e7fe      	b.n	80082be <HardFault_Handler+0x4>

080082c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082c4:	e7fe      	b.n	80082c4 <MemManage_Handler+0x4>

080082c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082c6:	b480      	push	{r7}
 80082c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082ca:	e7fe      	b.n	80082ca <BusFault_Handler+0x4>

080082cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082d0:	e7fe      	b.n	80082d0 <UsageFault_Handler+0x4>

080082d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082d2:	b480      	push	{r7}
 80082d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082d6:	bf00      	nop
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80082ee:	b480      	push	{r7}
 80082f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082f2:	bf00      	nop
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008300:	f000 f91c 	bl	800853c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008304:	bf00      	nop
 8008306:	bd80      	pop	{r7, pc}

08008308 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e00a      	b.n	8008330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800831a:	f3af 8000 	nop.w
 800831e:	4601      	mov	r1, r0
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	60ba      	str	r2, [r7, #8]
 8008326:	b2ca      	uxtb	r2, r1
 8008328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	3301      	adds	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	dbf0      	blt.n	800831a <_read+0x12>
	}

return len;
 8008338:	687b      	ldr	r3, [r7, #4]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b086      	sub	sp, #24
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	e009      	b.n	8008368 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	60ba      	str	r2, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff ff6f 	bl	8008240 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	3301      	adds	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	dbf1      	blt.n	8008354 <_write+0x12>
	}
	return len;
 8008370:	687b      	ldr	r3, [r7, #4]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <_close>:

int _close(int file)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
	return -1;
 8008382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083a2:	605a      	str	r2, [r3, #4]
	return 0;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <_isatty>:

int _isatty(int file)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
	return 1;
 80083ba:	2301      	movs	r3, #1
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
	return 0;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083ec:	4a14      	ldr	r2, [pc, #80]	; (8008440 <_sbrk+0x5c>)
 80083ee:	4b15      	ldr	r3, [pc, #84]	; (8008444 <_sbrk+0x60>)
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083f8:	4b13      	ldr	r3, [pc, #76]	; (8008448 <_sbrk+0x64>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008400:	4b11      	ldr	r3, [pc, #68]	; (8008448 <_sbrk+0x64>)
 8008402:	4a12      	ldr	r2, [pc, #72]	; (800844c <_sbrk+0x68>)
 8008404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008406:	4b10      	ldr	r3, [pc, #64]	; (8008448 <_sbrk+0x64>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	429a      	cmp	r2, r3
 8008412:	d207      	bcs.n	8008424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008414:	f000 f8a6 	bl	8008564 <__errno>
 8008418:	4603      	mov	r3, r0
 800841a:	220c      	movs	r2, #12
 800841c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	e009      	b.n	8008438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008424:	4b08      	ldr	r3, [pc, #32]	; (8008448 <_sbrk+0x64>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <_sbrk+0x64>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	4a05      	ldr	r2, [pc, #20]	; (8008448 <_sbrk+0x64>)
 8008434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20020000 	.word	0x20020000
 8008444:	00000400 	.word	0x00000400
 8008448:	20000084 	.word	0x20000084
 800844c:	200000a0 	.word	0x200000a0

08008450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008454:	4b06      	ldr	r3, [pc, #24]	; (8008470 <SystemInit+0x20>)
 8008456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800845a:	4a05      	ldr	r2, [pc, #20]	; (8008470 <SystemInit+0x20>)
 800845c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008464:	bf00      	nop
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	e000ed00 	.word	0xe000ed00

08008474 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 8008478:	4b18      	ldr	r3, [pc, #96]	; (80084dc <USART2_Init+0x68>)
 800847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847c:	4a17      	ldr	r2, [pc, #92]	; (80084dc <USART2_Init+0x68>)
 800847e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008482:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 8008484:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <USART2_Init+0x6c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a15      	ldr	r2, [pc, #84]	; (80084e0 <USART2_Init+0x6c>)
 800848a:	f043 0320 	orr.w	r3, r3, #32
 800848e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 8008490:	4b13      	ldr	r3, [pc, #76]	; (80084e0 <USART2_Init+0x6c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a12      	ldr	r2, [pc, #72]	; (80084e0 <USART2_Init+0x6c>)
 8008496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 800849c:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <USART2_Init+0x6c>)
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	4a0f      	ldr	r2, [pc, #60]	; (80084e0 <USART2_Init+0x6c>)
 80084a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80084a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <USART2_Init+0x6c>)
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	4a0c      	ldr	r2, [pc, #48]	; (80084e0 <USART2_Init+0x6c>)
 80084ae:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80084b2:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <USART2_Init+0x70>)
 80084b6:	228b      	movs	r2, #139	; 0x8b
 80084b8:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 80084ba:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <USART2_Init+0x70>)
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <USART2_Init+0x70>)
 80084c0:	f043 030c 	orr.w	r3, r3, #12
 80084c4:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;
 80084c6:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <USART2_Init+0x70>)
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	4a06      	ldr	r2, [pc, #24]	; (80084e4 <USART2_Init+0x70>)
 80084cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084d0:	60d3      	str	r3, [r2, #12]
}
 80084d2:	bf00      	nop
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	40023800 	.word	0x40023800
 80084e0:	40020000 	.word	0x40020000
 80084e4:	40004400 	.word	0x40004400

080084e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80084e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80084ec:	480d      	ldr	r0, [pc, #52]	; (8008524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80084ee:	490e      	ldr	r1, [pc, #56]	; (8008528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80084f0:	4a0e      	ldr	r2, [pc, #56]	; (800852c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80084f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084f4:	e002      	b.n	80084fc <LoopCopyDataInit>

080084f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084fa:	3304      	adds	r3, #4

080084fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008500:	d3f9      	bcc.n	80084f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008502:	4a0b      	ldr	r2, [pc, #44]	; (8008530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008504:	4c0b      	ldr	r4, [pc, #44]	; (8008534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008508:	e001      	b.n	800850e <LoopFillZerobss>

0800850a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800850a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800850c:	3204      	adds	r2, #4

0800850e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800850e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008510:	d3fb      	bcc.n	800850a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008512:	f7ff ff9d 	bl	8008450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008516:	f000 f82b 	bl	8008570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800851a:	f7ff feab 	bl	8008274 <main>
  bx  lr    
 800851e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008528:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800852c:	08009060 	.word	0x08009060
  ldr r2, =_sbss
 8008530:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008534:	2000009c 	.word	0x2000009c

08008538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008538:	e7fe      	b.n	8008538 <ADC_IRQHandler>
	...

0800853c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008540:	4b06      	ldr	r3, [pc, #24]	; (800855c <HAL_IncTick+0x20>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <HAL_IncTick+0x24>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4413      	add	r3, r2
 800854c:	4a04      	ldr	r2, [pc, #16]	; (8008560 <HAL_IncTick+0x24>)
 800854e:	6013      	str	r3, [r2, #0]
}
 8008550:	bf00      	nop
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000000 	.word	0x20000000
 8008560:	20000088 	.word	0x20000088

08008564 <__errno>:
 8008564:	4b01      	ldr	r3, [pc, #4]	; (800856c <__errno+0x8>)
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20000004 	.word	0x20000004

08008570 <__libc_init_array>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4d0d      	ldr	r5, [pc, #52]	; (80085a8 <__libc_init_array+0x38>)
 8008574:	4c0d      	ldr	r4, [pc, #52]	; (80085ac <__libc_init_array+0x3c>)
 8008576:	1b64      	subs	r4, r4, r5
 8008578:	10a4      	asrs	r4, r4, #2
 800857a:	2600      	movs	r6, #0
 800857c:	42a6      	cmp	r6, r4
 800857e:	d109      	bne.n	8008594 <__libc_init_array+0x24>
 8008580:	4d0b      	ldr	r5, [pc, #44]	; (80085b0 <__libc_init_array+0x40>)
 8008582:	4c0c      	ldr	r4, [pc, #48]	; (80085b4 <__libc_init_array+0x44>)
 8008584:	f000 fd1e 	bl	8008fc4 <_init>
 8008588:	1b64      	subs	r4, r4, r5
 800858a:	10a4      	asrs	r4, r4, #2
 800858c:	2600      	movs	r6, #0
 800858e:	42a6      	cmp	r6, r4
 8008590:	d105      	bne.n	800859e <__libc_init_array+0x2e>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	f855 3b04 	ldr.w	r3, [r5], #4
 8008598:	4798      	blx	r3
 800859a:	3601      	adds	r6, #1
 800859c:	e7ee      	b.n	800857c <__libc_init_array+0xc>
 800859e:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a2:	4798      	blx	r3
 80085a4:	3601      	adds	r6, #1
 80085a6:	e7f2      	b.n	800858e <__libc_init_array+0x1e>
 80085a8:	08009058 	.word	0x08009058
 80085ac:	08009058 	.word	0x08009058
 80085b0:	08009058 	.word	0x08009058
 80085b4:	0800905c 	.word	0x0800905c

080085b8 <memset>:
 80085b8:	4402      	add	r2, r0
 80085ba:	4603      	mov	r3, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <memset+0xa>
 80085c0:	4770      	bx	lr
 80085c2:	f803 1b01 	strb.w	r1, [r3], #1
 80085c6:	e7f9      	b.n	80085bc <memset+0x4>

080085c8 <_puts_r>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	460e      	mov	r6, r1
 80085cc:	4605      	mov	r5, r0
 80085ce:	b118      	cbz	r0, 80085d8 <_puts_r+0x10>
 80085d0:	6983      	ldr	r3, [r0, #24]
 80085d2:	b90b      	cbnz	r3, 80085d8 <_puts_r+0x10>
 80085d4:	f000 fa48 	bl	8008a68 <__sinit>
 80085d8:	69ab      	ldr	r3, [r5, #24]
 80085da:	68ac      	ldr	r4, [r5, #8]
 80085dc:	b913      	cbnz	r3, 80085e4 <_puts_r+0x1c>
 80085de:	4628      	mov	r0, r5
 80085e0:	f000 fa42 	bl	8008a68 <__sinit>
 80085e4:	4b2c      	ldr	r3, [pc, #176]	; (8008698 <_puts_r+0xd0>)
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d120      	bne.n	800862c <_puts_r+0x64>
 80085ea:	686c      	ldr	r4, [r5, #4]
 80085ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ee:	07db      	lsls	r3, r3, #31
 80085f0:	d405      	bmi.n	80085fe <_puts_r+0x36>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	0598      	lsls	r0, r3, #22
 80085f6:	d402      	bmi.n	80085fe <_puts_r+0x36>
 80085f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085fa:	f000 fad3 	bl	8008ba4 <__retarget_lock_acquire_recursive>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	0719      	lsls	r1, r3, #28
 8008602:	d51d      	bpl.n	8008640 <_puts_r+0x78>
 8008604:	6923      	ldr	r3, [r4, #16]
 8008606:	b1db      	cbz	r3, 8008640 <_puts_r+0x78>
 8008608:	3e01      	subs	r6, #1
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008610:	3b01      	subs	r3, #1
 8008612:	60a3      	str	r3, [r4, #8]
 8008614:	bb39      	cbnz	r1, 8008666 <_puts_r+0x9e>
 8008616:	2b00      	cmp	r3, #0
 8008618:	da38      	bge.n	800868c <_puts_r+0xc4>
 800861a:	4622      	mov	r2, r4
 800861c:	210a      	movs	r1, #10
 800861e:	4628      	mov	r0, r5
 8008620:	f000 f848 	bl	80086b4 <__swbuf_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d011      	beq.n	800864c <_puts_r+0x84>
 8008628:	250a      	movs	r5, #10
 800862a:	e011      	b.n	8008650 <_puts_r+0x88>
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <_puts_r+0xd4>)
 800862e:	429c      	cmp	r4, r3
 8008630:	d101      	bne.n	8008636 <_puts_r+0x6e>
 8008632:	68ac      	ldr	r4, [r5, #8]
 8008634:	e7da      	b.n	80085ec <_puts_r+0x24>
 8008636:	4b1a      	ldr	r3, [pc, #104]	; (80086a0 <_puts_r+0xd8>)
 8008638:	429c      	cmp	r4, r3
 800863a:	bf08      	it	eq
 800863c:	68ec      	ldreq	r4, [r5, #12]
 800863e:	e7d5      	b.n	80085ec <_puts_r+0x24>
 8008640:	4621      	mov	r1, r4
 8008642:	4628      	mov	r0, r5
 8008644:	f000 f888 	bl	8008758 <__swsetup_r>
 8008648:	2800      	cmp	r0, #0
 800864a:	d0dd      	beq.n	8008608 <_puts_r+0x40>
 800864c:	f04f 35ff 	mov.w	r5, #4294967295
 8008650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008652:	07da      	lsls	r2, r3, #31
 8008654:	d405      	bmi.n	8008662 <_puts_r+0x9a>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	059b      	lsls	r3, r3, #22
 800865a:	d402      	bmi.n	8008662 <_puts_r+0x9a>
 800865c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865e:	f000 faa2 	bl	8008ba6 <__retarget_lock_release_recursive>
 8008662:	4628      	mov	r0, r5
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	2b00      	cmp	r3, #0
 8008668:	da04      	bge.n	8008674 <_puts_r+0xac>
 800866a:	69a2      	ldr	r2, [r4, #24]
 800866c:	429a      	cmp	r2, r3
 800866e:	dc06      	bgt.n	800867e <_puts_r+0xb6>
 8008670:	290a      	cmp	r1, #10
 8008672:	d004      	beq.n	800867e <_puts_r+0xb6>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	6022      	str	r2, [r4, #0]
 800867a:	7019      	strb	r1, [r3, #0]
 800867c:	e7c5      	b.n	800860a <_puts_r+0x42>
 800867e:	4622      	mov	r2, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f000 f817 	bl	80086b4 <__swbuf_r>
 8008686:	3001      	adds	r0, #1
 8008688:	d1bf      	bne.n	800860a <_puts_r+0x42>
 800868a:	e7df      	b.n	800864c <_puts_r+0x84>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	250a      	movs	r5, #10
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	6022      	str	r2, [r4, #0]
 8008694:	701d      	strb	r5, [r3, #0]
 8008696:	e7db      	b.n	8008650 <_puts_r+0x88>
 8008698:	08009018 	.word	0x08009018
 800869c:	08009038 	.word	0x08009038
 80086a0:	08008ff8 	.word	0x08008ff8

080086a4 <puts>:
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <puts+0xc>)
 80086a6:	4601      	mov	r1, r0
 80086a8:	6818      	ldr	r0, [r3, #0]
 80086aa:	f7ff bf8d 	b.w	80085c8 <_puts_r>
 80086ae:	bf00      	nop
 80086b0:	20000004 	.word	0x20000004

080086b4 <__swbuf_r>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	460e      	mov	r6, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	4605      	mov	r5, r0
 80086bc:	b118      	cbz	r0, 80086c6 <__swbuf_r+0x12>
 80086be:	6983      	ldr	r3, [r0, #24]
 80086c0:	b90b      	cbnz	r3, 80086c6 <__swbuf_r+0x12>
 80086c2:	f000 f9d1 	bl	8008a68 <__sinit>
 80086c6:	4b21      	ldr	r3, [pc, #132]	; (800874c <__swbuf_r+0x98>)
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d12b      	bne.n	8008724 <__swbuf_r+0x70>
 80086cc:	686c      	ldr	r4, [r5, #4]
 80086ce:	69a3      	ldr	r3, [r4, #24]
 80086d0:	60a3      	str	r3, [r4, #8]
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	071a      	lsls	r2, r3, #28
 80086d6:	d52f      	bpl.n	8008738 <__swbuf_r+0x84>
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	b36b      	cbz	r3, 8008738 <__swbuf_r+0x84>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	1ac0      	subs	r0, r0, r3
 80086e2:	6963      	ldr	r3, [r4, #20]
 80086e4:	b2f6      	uxtb	r6, r6
 80086e6:	4283      	cmp	r3, r0
 80086e8:	4637      	mov	r7, r6
 80086ea:	dc04      	bgt.n	80086f6 <__swbuf_r+0x42>
 80086ec:	4621      	mov	r1, r4
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f926 	bl	8008940 <_fflush_r>
 80086f4:	bb30      	cbnz	r0, 8008744 <__swbuf_r+0x90>
 80086f6:	68a3      	ldr	r3, [r4, #8]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	60a3      	str	r3, [r4, #8]
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	6022      	str	r2, [r4, #0]
 8008702:	701e      	strb	r6, [r3, #0]
 8008704:	6963      	ldr	r3, [r4, #20]
 8008706:	3001      	adds	r0, #1
 8008708:	4283      	cmp	r3, r0
 800870a:	d004      	beq.n	8008716 <__swbuf_r+0x62>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	07db      	lsls	r3, r3, #31
 8008710:	d506      	bpl.n	8008720 <__swbuf_r+0x6c>
 8008712:	2e0a      	cmp	r6, #10
 8008714:	d104      	bne.n	8008720 <__swbuf_r+0x6c>
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f911 	bl	8008940 <_fflush_r>
 800871e:	b988      	cbnz	r0, 8008744 <__swbuf_r+0x90>
 8008720:	4638      	mov	r0, r7
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <__swbuf_r+0x9c>)
 8008726:	429c      	cmp	r4, r3
 8008728:	d101      	bne.n	800872e <__swbuf_r+0x7a>
 800872a:	68ac      	ldr	r4, [r5, #8]
 800872c:	e7cf      	b.n	80086ce <__swbuf_r+0x1a>
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <__swbuf_r+0xa0>)
 8008730:	429c      	cmp	r4, r3
 8008732:	bf08      	it	eq
 8008734:	68ec      	ldreq	r4, [r5, #12]
 8008736:	e7ca      	b.n	80086ce <__swbuf_r+0x1a>
 8008738:	4621      	mov	r1, r4
 800873a:	4628      	mov	r0, r5
 800873c:	f000 f80c 	bl	8008758 <__swsetup_r>
 8008740:	2800      	cmp	r0, #0
 8008742:	d0cb      	beq.n	80086dc <__swbuf_r+0x28>
 8008744:	f04f 37ff 	mov.w	r7, #4294967295
 8008748:	e7ea      	b.n	8008720 <__swbuf_r+0x6c>
 800874a:	bf00      	nop
 800874c:	08009018 	.word	0x08009018
 8008750:	08009038 	.word	0x08009038
 8008754:	08008ff8 	.word	0x08008ff8

08008758 <__swsetup_r>:
 8008758:	4b32      	ldr	r3, [pc, #200]	; (8008824 <__swsetup_r+0xcc>)
 800875a:	b570      	push	{r4, r5, r6, lr}
 800875c:	681d      	ldr	r5, [r3, #0]
 800875e:	4606      	mov	r6, r0
 8008760:	460c      	mov	r4, r1
 8008762:	b125      	cbz	r5, 800876e <__swsetup_r+0x16>
 8008764:	69ab      	ldr	r3, [r5, #24]
 8008766:	b913      	cbnz	r3, 800876e <__swsetup_r+0x16>
 8008768:	4628      	mov	r0, r5
 800876a:	f000 f97d 	bl	8008a68 <__sinit>
 800876e:	4b2e      	ldr	r3, [pc, #184]	; (8008828 <__swsetup_r+0xd0>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d10f      	bne.n	8008794 <__swsetup_r+0x3c>
 8008774:	686c      	ldr	r4, [r5, #4]
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800877c:	0719      	lsls	r1, r3, #28
 800877e:	d42c      	bmi.n	80087da <__swsetup_r+0x82>
 8008780:	06dd      	lsls	r5, r3, #27
 8008782:	d411      	bmi.n	80087a8 <__swsetup_r+0x50>
 8008784:	2309      	movs	r3, #9
 8008786:	6033      	str	r3, [r6, #0]
 8008788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	e03e      	b.n	8008812 <__swsetup_r+0xba>
 8008794:	4b25      	ldr	r3, [pc, #148]	; (800882c <__swsetup_r+0xd4>)
 8008796:	429c      	cmp	r4, r3
 8008798:	d101      	bne.n	800879e <__swsetup_r+0x46>
 800879a:	68ac      	ldr	r4, [r5, #8]
 800879c:	e7eb      	b.n	8008776 <__swsetup_r+0x1e>
 800879e:	4b24      	ldr	r3, [pc, #144]	; (8008830 <__swsetup_r+0xd8>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	bf08      	it	eq
 80087a4:	68ec      	ldreq	r4, [r5, #12]
 80087a6:	e7e6      	b.n	8008776 <__swsetup_r+0x1e>
 80087a8:	0758      	lsls	r0, r3, #29
 80087aa:	d512      	bpl.n	80087d2 <__swsetup_r+0x7a>
 80087ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ae:	b141      	cbz	r1, 80087c2 <__swsetup_r+0x6a>
 80087b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b4:	4299      	cmp	r1, r3
 80087b6:	d002      	beq.n	80087be <__swsetup_r+0x66>
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 fa5b 	bl	8008c74 <_free_r>
 80087be:	2300      	movs	r3, #0
 80087c0:	6363      	str	r3, [r4, #52]	; 0x34
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	2300      	movs	r3, #0
 80087cc:	6063      	str	r3, [r4, #4]
 80087ce:	6923      	ldr	r3, [r4, #16]
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	f043 0308 	orr.w	r3, r3, #8
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	b94b      	cbnz	r3, 80087f2 <__swsetup_r+0x9a>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e8:	d003      	beq.n	80087f2 <__swsetup_r+0x9a>
 80087ea:	4621      	mov	r1, r4
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 fa01 	bl	8008bf4 <__smakebuf_r>
 80087f2:	89a0      	ldrh	r0, [r4, #12]
 80087f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087f8:	f010 0301 	ands.w	r3, r0, #1
 80087fc:	d00a      	beq.n	8008814 <__swsetup_r+0xbc>
 80087fe:	2300      	movs	r3, #0
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	6963      	ldr	r3, [r4, #20]
 8008804:	425b      	negs	r3, r3
 8008806:	61a3      	str	r3, [r4, #24]
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	b943      	cbnz	r3, 800881e <__swsetup_r+0xc6>
 800880c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008810:	d1ba      	bne.n	8008788 <__swsetup_r+0x30>
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	0781      	lsls	r1, r0, #30
 8008816:	bf58      	it	pl
 8008818:	6963      	ldrpl	r3, [r4, #20]
 800881a:	60a3      	str	r3, [r4, #8]
 800881c:	e7f4      	b.n	8008808 <__swsetup_r+0xb0>
 800881e:	2000      	movs	r0, #0
 8008820:	e7f7      	b.n	8008812 <__swsetup_r+0xba>
 8008822:	bf00      	nop
 8008824:	20000004 	.word	0x20000004
 8008828:	08009018 	.word	0x08009018
 800882c:	08009038 	.word	0x08009038
 8008830:	08008ff8 	.word	0x08008ff8

08008834 <__sflush_r>:
 8008834:	898a      	ldrh	r2, [r1, #12]
 8008836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883a:	4605      	mov	r5, r0
 800883c:	0710      	lsls	r0, r2, #28
 800883e:	460c      	mov	r4, r1
 8008840:	d458      	bmi.n	80088f4 <__sflush_r+0xc0>
 8008842:	684b      	ldr	r3, [r1, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dc05      	bgt.n	8008854 <__sflush_r+0x20>
 8008848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	dc02      	bgt.n	8008854 <__sflush_r+0x20>
 800884e:	2000      	movs	r0, #0
 8008850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008856:	2e00      	cmp	r6, #0
 8008858:	d0f9      	beq.n	800884e <__sflush_r+0x1a>
 800885a:	2300      	movs	r3, #0
 800885c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008860:	682f      	ldr	r7, [r5, #0]
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	d032      	beq.n	80088cc <__sflush_r+0x98>
 8008866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	075a      	lsls	r2, r3, #29
 800886c:	d505      	bpl.n	800887a <__sflush_r+0x46>
 800886e:	6863      	ldr	r3, [r4, #4]
 8008870:	1ac0      	subs	r0, r0, r3
 8008872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008874:	b10b      	cbz	r3, 800887a <__sflush_r+0x46>
 8008876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008878:	1ac0      	subs	r0, r0, r3
 800887a:	2300      	movs	r3, #0
 800887c:	4602      	mov	r2, r0
 800887e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008880:	6a21      	ldr	r1, [r4, #32]
 8008882:	4628      	mov	r0, r5
 8008884:	47b0      	blx	r6
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	d106      	bne.n	800889a <__sflush_r+0x66>
 800888c:	6829      	ldr	r1, [r5, #0]
 800888e:	291d      	cmp	r1, #29
 8008890:	d82c      	bhi.n	80088ec <__sflush_r+0xb8>
 8008892:	4a2a      	ldr	r2, [pc, #168]	; (800893c <__sflush_r+0x108>)
 8008894:	40ca      	lsrs	r2, r1
 8008896:	07d6      	lsls	r6, r2, #31
 8008898:	d528      	bpl.n	80088ec <__sflush_r+0xb8>
 800889a:	2200      	movs	r2, #0
 800889c:	6062      	str	r2, [r4, #4]
 800889e:	04d9      	lsls	r1, r3, #19
 80088a0:	6922      	ldr	r2, [r4, #16]
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	d504      	bpl.n	80088b0 <__sflush_r+0x7c>
 80088a6:	1c42      	adds	r2, r0, #1
 80088a8:	d101      	bne.n	80088ae <__sflush_r+0x7a>
 80088aa:	682b      	ldr	r3, [r5, #0]
 80088ac:	b903      	cbnz	r3, 80088b0 <__sflush_r+0x7c>
 80088ae:	6560      	str	r0, [r4, #84]	; 0x54
 80088b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088b2:	602f      	str	r7, [r5, #0]
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d0ca      	beq.n	800884e <__sflush_r+0x1a>
 80088b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088bc:	4299      	cmp	r1, r3
 80088be:	d002      	beq.n	80088c6 <__sflush_r+0x92>
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f9d7 	bl	8008c74 <_free_r>
 80088c6:	2000      	movs	r0, #0
 80088c8:	6360      	str	r0, [r4, #52]	; 0x34
 80088ca:	e7c1      	b.n	8008850 <__sflush_r+0x1c>
 80088cc:	6a21      	ldr	r1, [r4, #32]
 80088ce:	2301      	movs	r3, #1
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b0      	blx	r6
 80088d4:	1c41      	adds	r1, r0, #1
 80088d6:	d1c7      	bne.n	8008868 <__sflush_r+0x34>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0c4      	beq.n	8008868 <__sflush_r+0x34>
 80088de:	2b1d      	cmp	r3, #29
 80088e0:	d001      	beq.n	80088e6 <__sflush_r+0xb2>
 80088e2:	2b16      	cmp	r3, #22
 80088e4:	d101      	bne.n	80088ea <__sflush_r+0xb6>
 80088e6:	602f      	str	r7, [r5, #0]
 80088e8:	e7b1      	b.n	800884e <__sflush_r+0x1a>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f0:	81a3      	strh	r3, [r4, #12]
 80088f2:	e7ad      	b.n	8008850 <__sflush_r+0x1c>
 80088f4:	690f      	ldr	r7, [r1, #16]
 80088f6:	2f00      	cmp	r7, #0
 80088f8:	d0a9      	beq.n	800884e <__sflush_r+0x1a>
 80088fa:	0793      	lsls	r3, r2, #30
 80088fc:	680e      	ldr	r6, [r1, #0]
 80088fe:	bf08      	it	eq
 8008900:	694b      	ldreq	r3, [r1, #20]
 8008902:	600f      	str	r7, [r1, #0]
 8008904:	bf18      	it	ne
 8008906:	2300      	movne	r3, #0
 8008908:	eba6 0807 	sub.w	r8, r6, r7
 800890c:	608b      	str	r3, [r1, #8]
 800890e:	f1b8 0f00 	cmp.w	r8, #0
 8008912:	dd9c      	ble.n	800884e <__sflush_r+0x1a>
 8008914:	6a21      	ldr	r1, [r4, #32]
 8008916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008918:	4643      	mov	r3, r8
 800891a:	463a      	mov	r2, r7
 800891c:	4628      	mov	r0, r5
 800891e:	47b0      	blx	r6
 8008920:	2800      	cmp	r0, #0
 8008922:	dc06      	bgt.n	8008932 <__sflush_r+0xfe>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	e78e      	b.n	8008850 <__sflush_r+0x1c>
 8008932:	4407      	add	r7, r0
 8008934:	eba8 0800 	sub.w	r8, r8, r0
 8008938:	e7e9      	b.n	800890e <__sflush_r+0xda>
 800893a:	bf00      	nop
 800893c:	20400001 	.word	0x20400001

08008940 <_fflush_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	690b      	ldr	r3, [r1, #16]
 8008944:	4605      	mov	r5, r0
 8008946:	460c      	mov	r4, r1
 8008948:	b913      	cbnz	r3, 8008950 <_fflush_r+0x10>
 800894a:	2500      	movs	r5, #0
 800894c:	4628      	mov	r0, r5
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	b118      	cbz	r0, 800895a <_fflush_r+0x1a>
 8008952:	6983      	ldr	r3, [r0, #24]
 8008954:	b90b      	cbnz	r3, 800895a <_fflush_r+0x1a>
 8008956:	f000 f887 	bl	8008a68 <__sinit>
 800895a:	4b14      	ldr	r3, [pc, #80]	; (80089ac <_fflush_r+0x6c>)
 800895c:	429c      	cmp	r4, r3
 800895e:	d11b      	bne.n	8008998 <_fflush_r+0x58>
 8008960:	686c      	ldr	r4, [r5, #4]
 8008962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0ef      	beq.n	800894a <_fflush_r+0xa>
 800896a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800896c:	07d0      	lsls	r0, r2, #31
 800896e:	d404      	bmi.n	800897a <_fflush_r+0x3a>
 8008970:	0599      	lsls	r1, r3, #22
 8008972:	d402      	bmi.n	800897a <_fflush_r+0x3a>
 8008974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008976:	f000 f915 	bl	8008ba4 <__retarget_lock_acquire_recursive>
 800897a:	4628      	mov	r0, r5
 800897c:	4621      	mov	r1, r4
 800897e:	f7ff ff59 	bl	8008834 <__sflush_r>
 8008982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008984:	07da      	lsls	r2, r3, #31
 8008986:	4605      	mov	r5, r0
 8008988:	d4e0      	bmi.n	800894c <_fflush_r+0xc>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	059b      	lsls	r3, r3, #22
 800898e:	d4dd      	bmi.n	800894c <_fflush_r+0xc>
 8008990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008992:	f000 f908 	bl	8008ba6 <__retarget_lock_release_recursive>
 8008996:	e7d9      	b.n	800894c <_fflush_r+0xc>
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <_fflush_r+0x70>)
 800899a:	429c      	cmp	r4, r3
 800899c:	d101      	bne.n	80089a2 <_fflush_r+0x62>
 800899e:	68ac      	ldr	r4, [r5, #8]
 80089a0:	e7df      	b.n	8008962 <_fflush_r+0x22>
 80089a2:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <_fflush_r+0x74>)
 80089a4:	429c      	cmp	r4, r3
 80089a6:	bf08      	it	eq
 80089a8:	68ec      	ldreq	r4, [r5, #12]
 80089aa:	e7da      	b.n	8008962 <_fflush_r+0x22>
 80089ac:	08009018 	.word	0x08009018
 80089b0:	08009038 	.word	0x08009038
 80089b4:	08008ff8 	.word	0x08008ff8

080089b8 <std>:
 80089b8:	2300      	movs	r3, #0
 80089ba:	b510      	push	{r4, lr}
 80089bc:	4604      	mov	r4, r0
 80089be:	e9c0 3300 	strd	r3, r3, [r0]
 80089c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089c6:	6083      	str	r3, [r0, #8]
 80089c8:	8181      	strh	r1, [r0, #12]
 80089ca:	6643      	str	r3, [r0, #100]	; 0x64
 80089cc:	81c2      	strh	r2, [r0, #14]
 80089ce:	6183      	str	r3, [r0, #24]
 80089d0:	4619      	mov	r1, r3
 80089d2:	2208      	movs	r2, #8
 80089d4:	305c      	adds	r0, #92	; 0x5c
 80089d6:	f7ff fdef 	bl	80085b8 <memset>
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <std+0x38>)
 80089dc:	6263      	str	r3, [r4, #36]	; 0x24
 80089de:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <std+0x3c>)
 80089e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80089e2:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <std+0x40>)
 80089e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089e6:	4b05      	ldr	r3, [pc, #20]	; (80089fc <std+0x44>)
 80089e8:	6224      	str	r4, [r4, #32]
 80089ea:	6323      	str	r3, [r4, #48]	; 0x30
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	bf00      	nop
 80089f0:	08008e55 	.word	0x08008e55
 80089f4:	08008e77 	.word	0x08008e77
 80089f8:	08008eaf 	.word	0x08008eaf
 80089fc:	08008ed3 	.word	0x08008ed3

08008a00 <_cleanup_r>:
 8008a00:	4901      	ldr	r1, [pc, #4]	; (8008a08 <_cleanup_r+0x8>)
 8008a02:	f000 b8af 	b.w	8008b64 <_fwalk_reent>
 8008a06:	bf00      	nop
 8008a08:	08008941 	.word	0x08008941

08008a0c <__sfmoreglue>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	2268      	movs	r2, #104	; 0x68
 8008a10:	1e4d      	subs	r5, r1, #1
 8008a12:	4355      	muls	r5, r2
 8008a14:	460e      	mov	r6, r1
 8008a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a1a:	f000 f997 	bl	8008d4c <_malloc_r>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	b140      	cbz	r0, 8008a34 <__sfmoreglue+0x28>
 8008a22:	2100      	movs	r1, #0
 8008a24:	e9c0 1600 	strd	r1, r6, [r0]
 8008a28:	300c      	adds	r0, #12
 8008a2a:	60a0      	str	r0, [r4, #8]
 8008a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a30:	f7ff fdc2 	bl	80085b8 <memset>
 8008a34:	4620      	mov	r0, r4
 8008a36:	bd70      	pop	{r4, r5, r6, pc}

08008a38 <__sfp_lock_acquire>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__sfp_lock_acquire+0x8>)
 8008a3a:	f000 b8b3 	b.w	8008ba4 <__retarget_lock_acquire_recursive>
 8008a3e:	bf00      	nop
 8008a40:	2000008d 	.word	0x2000008d

08008a44 <__sfp_lock_release>:
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <__sfp_lock_release+0x8>)
 8008a46:	f000 b8ae 	b.w	8008ba6 <__retarget_lock_release_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	2000008d 	.word	0x2000008d

08008a50 <__sinit_lock_acquire>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__sinit_lock_acquire+0x8>)
 8008a52:	f000 b8a7 	b.w	8008ba4 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	2000008e 	.word	0x2000008e

08008a5c <__sinit_lock_release>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__sinit_lock_release+0x8>)
 8008a5e:	f000 b8a2 	b.w	8008ba6 <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	2000008e 	.word	0x2000008e

08008a68 <__sinit>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	f7ff fff0 	bl	8008a50 <__sinit_lock_acquire>
 8008a70:	69a3      	ldr	r3, [r4, #24]
 8008a72:	b11b      	cbz	r3, 8008a7c <__sinit+0x14>
 8008a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a78:	f7ff bff0 	b.w	8008a5c <__sinit_lock_release>
 8008a7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a80:	6523      	str	r3, [r4, #80]	; 0x50
 8008a82:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <__sinit+0x68>)
 8008a84:	4a13      	ldr	r2, [pc, #76]	; (8008ad4 <__sinit+0x6c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a8a:	42a3      	cmp	r3, r4
 8008a8c:	bf04      	itt	eq
 8008a8e:	2301      	moveq	r3, #1
 8008a90:	61a3      	streq	r3, [r4, #24]
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 f820 	bl	8008ad8 <__sfp>
 8008a98:	6060      	str	r0, [r4, #4]
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 f81c 	bl	8008ad8 <__sfp>
 8008aa0:	60a0      	str	r0, [r4, #8]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 f818 	bl	8008ad8 <__sfp>
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	60e0      	str	r0, [r4, #12]
 8008aac:	2104      	movs	r1, #4
 8008aae:	6860      	ldr	r0, [r4, #4]
 8008ab0:	f7ff ff82 	bl	80089b8 <std>
 8008ab4:	68a0      	ldr	r0, [r4, #8]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	2109      	movs	r1, #9
 8008aba:	f7ff ff7d 	bl	80089b8 <std>
 8008abe:	68e0      	ldr	r0, [r4, #12]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	2112      	movs	r1, #18
 8008ac4:	f7ff ff78 	bl	80089b8 <std>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	61a3      	str	r3, [r4, #24]
 8008acc:	e7d2      	b.n	8008a74 <__sinit+0xc>
 8008ace:	bf00      	nop
 8008ad0:	08008ff4 	.word	0x08008ff4
 8008ad4:	08008a01 	.word	0x08008a01

08008ad8 <__sfp>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	4607      	mov	r7, r0
 8008adc:	f7ff ffac 	bl	8008a38 <__sfp_lock_acquire>
 8008ae0:	4b1e      	ldr	r3, [pc, #120]	; (8008b5c <__sfp+0x84>)
 8008ae2:	681e      	ldr	r6, [r3, #0]
 8008ae4:	69b3      	ldr	r3, [r6, #24]
 8008ae6:	b913      	cbnz	r3, 8008aee <__sfp+0x16>
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff ffbd 	bl	8008a68 <__sinit>
 8008aee:	3648      	adds	r6, #72	; 0x48
 8008af0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	d503      	bpl.n	8008b00 <__sfp+0x28>
 8008af8:	6833      	ldr	r3, [r6, #0]
 8008afa:	b30b      	cbz	r3, 8008b40 <__sfp+0x68>
 8008afc:	6836      	ldr	r6, [r6, #0]
 8008afe:	e7f7      	b.n	8008af0 <__sfp+0x18>
 8008b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b04:	b9d5      	cbnz	r5, 8008b3c <__sfp+0x64>
 8008b06:	4b16      	ldr	r3, [pc, #88]	; (8008b60 <__sfp+0x88>)
 8008b08:	60e3      	str	r3, [r4, #12]
 8008b0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b10:	f000 f847 	bl	8008ba2 <__retarget_lock_init_recursive>
 8008b14:	f7ff ff96 	bl	8008a44 <__sfp_lock_release>
 8008b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b20:	6025      	str	r5, [r4, #0]
 8008b22:	61a5      	str	r5, [r4, #24]
 8008b24:	2208      	movs	r2, #8
 8008b26:	4629      	mov	r1, r5
 8008b28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b2c:	f7ff fd44 	bl	80085b8 <memset>
 8008b30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b38:	4620      	mov	r0, r4
 8008b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3c:	3468      	adds	r4, #104	; 0x68
 8008b3e:	e7d9      	b.n	8008af4 <__sfp+0x1c>
 8008b40:	2104      	movs	r1, #4
 8008b42:	4638      	mov	r0, r7
 8008b44:	f7ff ff62 	bl	8008a0c <__sfmoreglue>
 8008b48:	4604      	mov	r4, r0
 8008b4a:	6030      	str	r0, [r6, #0]
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d1d5      	bne.n	8008afc <__sfp+0x24>
 8008b50:	f7ff ff78 	bl	8008a44 <__sfp_lock_release>
 8008b54:	230c      	movs	r3, #12
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	e7ee      	b.n	8008b38 <__sfp+0x60>
 8008b5a:	bf00      	nop
 8008b5c:	08008ff4 	.word	0x08008ff4
 8008b60:	ffff0001 	.word	0xffff0001

08008b64 <_fwalk_reent>:
 8008b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b68:	4606      	mov	r6, r0
 8008b6a:	4688      	mov	r8, r1
 8008b6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b70:	2700      	movs	r7, #0
 8008b72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b76:	f1b9 0901 	subs.w	r9, r9, #1
 8008b7a:	d505      	bpl.n	8008b88 <_fwalk_reent+0x24>
 8008b7c:	6824      	ldr	r4, [r4, #0]
 8008b7e:	2c00      	cmp	r4, #0
 8008b80:	d1f7      	bne.n	8008b72 <_fwalk_reent+0xe>
 8008b82:	4638      	mov	r0, r7
 8008b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b88:	89ab      	ldrh	r3, [r5, #12]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d907      	bls.n	8008b9e <_fwalk_reent+0x3a>
 8008b8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b92:	3301      	adds	r3, #1
 8008b94:	d003      	beq.n	8008b9e <_fwalk_reent+0x3a>
 8008b96:	4629      	mov	r1, r5
 8008b98:	4630      	mov	r0, r6
 8008b9a:	47c0      	blx	r8
 8008b9c:	4307      	orrs	r7, r0
 8008b9e:	3568      	adds	r5, #104	; 0x68
 8008ba0:	e7e9      	b.n	8008b76 <_fwalk_reent+0x12>

08008ba2 <__retarget_lock_init_recursive>:
 8008ba2:	4770      	bx	lr

08008ba4 <__retarget_lock_acquire_recursive>:
 8008ba4:	4770      	bx	lr

08008ba6 <__retarget_lock_release_recursive>:
 8008ba6:	4770      	bx	lr

08008ba8 <__swhatbuf_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	460e      	mov	r6, r1
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	b096      	sub	sp, #88	; 0x58
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	461d      	mov	r5, r3
 8008bb8:	da08      	bge.n	8008bcc <__swhatbuf_r+0x24>
 8008bba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	061a      	lsls	r2, r3, #24
 8008bc4:	d410      	bmi.n	8008be8 <__swhatbuf_r+0x40>
 8008bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bca:	e00e      	b.n	8008bea <__swhatbuf_r+0x42>
 8008bcc:	466a      	mov	r2, sp
 8008bce:	f000 f9a7 	bl	8008f20 <_fstat_r>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	dbf1      	blt.n	8008bba <__swhatbuf_r+0x12>
 8008bd6:	9a01      	ldr	r2, [sp, #4]
 8008bd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008be0:	425a      	negs	r2, r3
 8008be2:	415a      	adcs	r2, r3
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	e7ee      	b.n	8008bc6 <__swhatbuf_r+0x1e>
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	2000      	movs	r0, #0
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	b016      	add	sp, #88	; 0x58
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bf4 <__smakebuf_r>:
 8008bf4:	898b      	ldrh	r3, [r1, #12]
 8008bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bf8:	079d      	lsls	r5, r3, #30
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	d507      	bpl.n	8008c10 <__smakebuf_r+0x1c>
 8008c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	6123      	str	r3, [r4, #16]
 8008c08:	2301      	movs	r3, #1
 8008c0a:	6163      	str	r3, [r4, #20]
 8008c0c:	b002      	add	sp, #8
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	ab01      	add	r3, sp, #4
 8008c12:	466a      	mov	r2, sp
 8008c14:	f7ff ffc8 	bl	8008ba8 <__swhatbuf_r>
 8008c18:	9900      	ldr	r1, [sp, #0]
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 f895 	bl	8008d4c <_malloc_r>
 8008c22:	b948      	cbnz	r0, 8008c38 <__smakebuf_r+0x44>
 8008c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c28:	059a      	lsls	r2, r3, #22
 8008c2a:	d4ef      	bmi.n	8008c0c <__smakebuf_r+0x18>
 8008c2c:	f023 0303 	bic.w	r3, r3, #3
 8008c30:	f043 0302 	orr.w	r3, r3, #2
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	e7e3      	b.n	8008c00 <__smakebuf_r+0xc>
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <__smakebuf_r+0x7c>)
 8008c3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	6020      	str	r0, [r4, #0]
 8008c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c44:	81a3      	strh	r3, [r4, #12]
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	6163      	str	r3, [r4, #20]
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	6120      	str	r0, [r4, #16]
 8008c4e:	b15b      	cbz	r3, 8008c68 <__smakebuf_r+0x74>
 8008c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c54:	4630      	mov	r0, r6
 8008c56:	f000 f975 	bl	8008f44 <_isatty_r>
 8008c5a:	b128      	cbz	r0, 8008c68 <__smakebuf_r+0x74>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f023 0303 	bic.w	r3, r3, #3
 8008c62:	f043 0301 	orr.w	r3, r3, #1
 8008c66:	81a3      	strh	r3, [r4, #12]
 8008c68:	89a0      	ldrh	r0, [r4, #12]
 8008c6a:	4305      	orrs	r5, r0
 8008c6c:	81a5      	strh	r5, [r4, #12]
 8008c6e:	e7cd      	b.n	8008c0c <__smakebuf_r+0x18>
 8008c70:	08008a01 	.word	0x08008a01

08008c74 <_free_r>:
 8008c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c76:	2900      	cmp	r1, #0
 8008c78:	d044      	beq.n	8008d04 <_free_r+0x90>
 8008c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c7e:	9001      	str	r0, [sp, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f1a1 0404 	sub.w	r4, r1, #4
 8008c86:	bfb8      	it	lt
 8008c88:	18e4      	addlt	r4, r4, r3
 8008c8a:	f000 f97d 	bl	8008f88 <__malloc_lock>
 8008c8e:	4a1e      	ldr	r2, [pc, #120]	; (8008d08 <_free_r+0x94>)
 8008c90:	9801      	ldr	r0, [sp, #4]
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	b933      	cbnz	r3, 8008ca4 <_free_r+0x30>
 8008c96:	6063      	str	r3, [r4, #4]
 8008c98:	6014      	str	r4, [r2, #0]
 8008c9a:	b003      	add	sp, #12
 8008c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca0:	f000 b978 	b.w	8008f94 <__malloc_unlock>
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	d908      	bls.n	8008cba <_free_r+0x46>
 8008ca8:	6825      	ldr	r5, [r4, #0]
 8008caa:	1961      	adds	r1, r4, r5
 8008cac:	428b      	cmp	r3, r1
 8008cae:	bf01      	itttt	eq
 8008cb0:	6819      	ldreq	r1, [r3, #0]
 8008cb2:	685b      	ldreq	r3, [r3, #4]
 8008cb4:	1949      	addeq	r1, r1, r5
 8008cb6:	6021      	streq	r1, [r4, #0]
 8008cb8:	e7ed      	b.n	8008c96 <_free_r+0x22>
 8008cba:	461a      	mov	r2, r3
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b10b      	cbz	r3, 8008cc4 <_free_r+0x50>
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	d9fa      	bls.n	8008cba <_free_r+0x46>
 8008cc4:	6811      	ldr	r1, [r2, #0]
 8008cc6:	1855      	adds	r5, r2, r1
 8008cc8:	42a5      	cmp	r5, r4
 8008cca:	d10b      	bne.n	8008ce4 <_free_r+0x70>
 8008ccc:	6824      	ldr	r4, [r4, #0]
 8008cce:	4421      	add	r1, r4
 8008cd0:	1854      	adds	r4, r2, r1
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	6011      	str	r1, [r2, #0]
 8008cd6:	d1e0      	bne.n	8008c9a <_free_r+0x26>
 8008cd8:	681c      	ldr	r4, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	6053      	str	r3, [r2, #4]
 8008cde:	4421      	add	r1, r4
 8008ce0:	6011      	str	r1, [r2, #0]
 8008ce2:	e7da      	b.n	8008c9a <_free_r+0x26>
 8008ce4:	d902      	bls.n	8008cec <_free_r+0x78>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	e7d6      	b.n	8008c9a <_free_r+0x26>
 8008cec:	6825      	ldr	r5, [r4, #0]
 8008cee:	1961      	adds	r1, r4, r5
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	bf04      	itt	eq
 8008cf4:	6819      	ldreq	r1, [r3, #0]
 8008cf6:	685b      	ldreq	r3, [r3, #4]
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	bf04      	itt	eq
 8008cfc:	1949      	addeq	r1, r1, r5
 8008cfe:	6021      	streq	r1, [r4, #0]
 8008d00:	6054      	str	r4, [r2, #4]
 8008d02:	e7ca      	b.n	8008c9a <_free_r+0x26>
 8008d04:	b003      	add	sp, #12
 8008d06:	bd30      	pop	{r4, r5, pc}
 8008d08:	20000090 	.word	0x20000090

08008d0c <sbrk_aligned>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	4e0e      	ldr	r6, [pc, #56]	; (8008d48 <sbrk_aligned+0x3c>)
 8008d10:	460c      	mov	r4, r1
 8008d12:	6831      	ldr	r1, [r6, #0]
 8008d14:	4605      	mov	r5, r0
 8008d16:	b911      	cbnz	r1, 8008d1e <sbrk_aligned+0x12>
 8008d18:	f000 f88c 	bl	8008e34 <_sbrk_r>
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f000 f887 	bl	8008e34 <_sbrk_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	d00a      	beq.n	8008d40 <sbrk_aligned+0x34>
 8008d2a:	1cc4      	adds	r4, r0, #3
 8008d2c:	f024 0403 	bic.w	r4, r4, #3
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d007      	beq.n	8008d44 <sbrk_aligned+0x38>
 8008d34:	1a21      	subs	r1, r4, r0
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 f87c 	bl	8008e34 <_sbrk_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d101      	bne.n	8008d44 <sbrk_aligned+0x38>
 8008d40:	f04f 34ff 	mov.w	r4, #4294967295
 8008d44:	4620      	mov	r0, r4
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	20000094 	.word	0x20000094

08008d4c <_malloc_r>:
 8008d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d50:	1ccd      	adds	r5, r1, #3
 8008d52:	f025 0503 	bic.w	r5, r5, #3
 8008d56:	3508      	adds	r5, #8
 8008d58:	2d0c      	cmp	r5, #12
 8008d5a:	bf38      	it	cc
 8008d5c:	250c      	movcc	r5, #12
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	4607      	mov	r7, r0
 8008d62:	db01      	blt.n	8008d68 <_malloc_r+0x1c>
 8008d64:	42a9      	cmp	r1, r5
 8008d66:	d905      	bls.n	8008d74 <_malloc_r+0x28>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d74:	4e2e      	ldr	r6, [pc, #184]	; (8008e30 <_malloc_r+0xe4>)
 8008d76:	f000 f907 	bl	8008f88 <__malloc_lock>
 8008d7a:	6833      	ldr	r3, [r6, #0]
 8008d7c:	461c      	mov	r4, r3
 8008d7e:	bb34      	cbnz	r4, 8008dce <_malloc_r+0x82>
 8008d80:	4629      	mov	r1, r5
 8008d82:	4638      	mov	r0, r7
 8008d84:	f7ff ffc2 	bl	8008d0c <sbrk_aligned>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	d14d      	bne.n	8008e2a <_malloc_r+0xde>
 8008d8e:	6834      	ldr	r4, [r6, #0]
 8008d90:	4626      	mov	r6, r4
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	d140      	bne.n	8008e18 <_malloc_r+0xcc>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	eb04 0803 	add.w	r8, r4, r3
 8008da0:	f000 f848 	bl	8008e34 <_sbrk_r>
 8008da4:	4580      	cmp	r8, r0
 8008da6:	d13a      	bne.n	8008e1e <_malloc_r+0xd2>
 8008da8:	6821      	ldr	r1, [r4, #0]
 8008daa:	3503      	adds	r5, #3
 8008dac:	1a6d      	subs	r5, r5, r1
 8008dae:	f025 0503 	bic.w	r5, r5, #3
 8008db2:	3508      	adds	r5, #8
 8008db4:	2d0c      	cmp	r5, #12
 8008db6:	bf38      	it	cc
 8008db8:	250c      	movcc	r5, #12
 8008dba:	4629      	mov	r1, r5
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f7ff ffa5 	bl	8008d0c <sbrk_aligned>
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d02b      	beq.n	8008e1e <_malloc_r+0xd2>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	442b      	add	r3, r5
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	e00e      	b.n	8008dec <_malloc_r+0xa0>
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	1b52      	subs	r2, r2, r5
 8008dd2:	d41e      	bmi.n	8008e12 <_malloc_r+0xc6>
 8008dd4:	2a0b      	cmp	r2, #11
 8008dd6:	d916      	bls.n	8008e06 <_malloc_r+0xba>
 8008dd8:	1961      	adds	r1, r4, r5
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	6025      	str	r5, [r4, #0]
 8008dde:	bf18      	it	ne
 8008de0:	6059      	strne	r1, [r3, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	bf08      	it	eq
 8008de6:	6031      	streq	r1, [r6, #0]
 8008de8:	5162      	str	r2, [r4, r5]
 8008dea:	604b      	str	r3, [r1, #4]
 8008dec:	4638      	mov	r0, r7
 8008dee:	f104 060b 	add.w	r6, r4, #11
 8008df2:	f000 f8cf 	bl	8008f94 <__malloc_unlock>
 8008df6:	f026 0607 	bic.w	r6, r6, #7
 8008dfa:	1d23      	adds	r3, r4, #4
 8008dfc:	1af2      	subs	r2, r6, r3
 8008dfe:	d0b6      	beq.n	8008d6e <_malloc_r+0x22>
 8008e00:	1b9b      	subs	r3, r3, r6
 8008e02:	50a3      	str	r3, [r4, r2]
 8008e04:	e7b3      	b.n	8008d6e <_malloc_r+0x22>
 8008e06:	6862      	ldr	r2, [r4, #4]
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	bf0c      	ite	eq
 8008e0c:	6032      	streq	r2, [r6, #0]
 8008e0e:	605a      	strne	r2, [r3, #4]
 8008e10:	e7ec      	b.n	8008dec <_malloc_r+0xa0>
 8008e12:	4623      	mov	r3, r4
 8008e14:	6864      	ldr	r4, [r4, #4]
 8008e16:	e7b2      	b.n	8008d7e <_malloc_r+0x32>
 8008e18:	4634      	mov	r4, r6
 8008e1a:	6876      	ldr	r6, [r6, #4]
 8008e1c:	e7b9      	b.n	8008d92 <_malloc_r+0x46>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	4638      	mov	r0, r7
 8008e24:	f000 f8b6 	bl	8008f94 <__malloc_unlock>
 8008e28:	e7a1      	b.n	8008d6e <_malloc_r+0x22>
 8008e2a:	6025      	str	r5, [r4, #0]
 8008e2c:	e7de      	b.n	8008dec <_malloc_r+0xa0>
 8008e2e:	bf00      	nop
 8008e30:	20000090 	.word	0x20000090

08008e34 <_sbrk_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4d06      	ldr	r5, [pc, #24]	; (8008e50 <_sbrk_r+0x1c>)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	602b      	str	r3, [r5, #0]
 8008e40:	f7ff fad0 	bl	80083e4 <_sbrk>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d102      	bne.n	8008e4e <_sbrk_r+0x1a>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	b103      	cbz	r3, 8008e4e <_sbrk_r+0x1a>
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	20000098 	.word	0x20000098

08008e54 <__sread>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	460c      	mov	r4, r1
 8008e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5c:	f000 f8a0 	bl	8008fa0 <_read_r>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	bfab      	itete	ge
 8008e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e66:	89a3      	ldrhlt	r3, [r4, #12]
 8008e68:	181b      	addge	r3, r3, r0
 8008e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e6e:	bfac      	ite	ge
 8008e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e72:	81a3      	strhlt	r3, [r4, #12]
 8008e74:	bd10      	pop	{r4, pc}

08008e76 <__swrite>:
 8008e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7a:	461f      	mov	r7, r3
 8008e7c:	898b      	ldrh	r3, [r1, #12]
 8008e7e:	05db      	lsls	r3, r3, #23
 8008e80:	4605      	mov	r5, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	4616      	mov	r6, r2
 8008e86:	d505      	bpl.n	8008e94 <__swrite+0x1e>
 8008e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f000 f868 	bl	8008f64 <_lseek_r>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eaa:	f000 b817 	b.w	8008edc <_write_r>

08008eae <__sseek>:
 8008eae:	b510      	push	{r4, lr}
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb6:	f000 f855 	bl	8008f64 <_lseek_r>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	bf15      	itete	ne
 8008ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eca:	81a3      	strheq	r3, [r4, #12]
 8008ecc:	bf18      	it	ne
 8008ece:	81a3      	strhne	r3, [r4, #12]
 8008ed0:	bd10      	pop	{r4, pc}

08008ed2 <__sclose>:
 8008ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed6:	f000 b813 	b.w	8008f00 <_close_r>
	...

08008edc <_write_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	; (8008efc <_write_r+0x20>)
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f7ff fa29 	bl	8008342 <_write>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_write_r+0x1e>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_write_r+0x1e>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000098 	.word	0x20000098

08008f00 <_close_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d06      	ldr	r5, [pc, #24]	; (8008f1c <_close_r+0x1c>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	f7ff fa35 	bl	800837a <_close>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_close_r+0x1a>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_close_r+0x1a>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	20000098 	.word	0x20000098

08008f20 <_fstat_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	; (8008f40 <_fstat_r+0x20>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	f7ff fa30 	bl	8008392 <_fstat>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d102      	bne.n	8008f3c <_fstat_r+0x1c>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b103      	cbz	r3, 8008f3c <_fstat_r+0x1c>
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000098 	.word	0x20000098

08008f44 <_isatty_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	; (8008f60 <_isatty_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7ff fa2f 	bl	80083b2 <_isatty>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_isatty_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_isatty_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20000098 	.word	0x20000098

08008f64 <_lseek_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d07      	ldr	r5, [pc, #28]	; (8008f84 <_lseek_r+0x20>)
 8008f68:	4604      	mov	r4, r0
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f7ff fa28 	bl	80083c8 <_lseek>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_lseek_r+0x1e>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_lseek_r+0x1e>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20000098 	.word	0x20000098

08008f88 <__malloc_lock>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__malloc_lock+0x8>)
 8008f8a:	f7ff be0b 	b.w	8008ba4 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	2000008c 	.word	0x2000008c

08008f94 <__malloc_unlock>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__malloc_unlock+0x8>)
 8008f96:	f7ff be06 	b.w	8008ba6 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	2000008c 	.word	0x2000008c

08008fa0 <_read_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d07      	ldr	r5, [pc, #28]	; (8008fc0 <_read_r+0x20>)
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	4611      	mov	r1, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	602a      	str	r2, [r5, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f7ff f9aa 	bl	8008308 <_read>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_read_r+0x1e>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_read_r+0x1e>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20000098 	.word	0x20000098

08008fc4 <_init>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr

08008fd0 <_fini>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	bf00      	nop
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr
